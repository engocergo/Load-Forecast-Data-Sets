import folium
import matplotlib.pyplot as plt
import requests
import json
from io import StringIO

# Method 1: Using Folium (Interactive Map) - RECOMMENDED
def create_folium_map():
    """Create an interactive map with Germany boundaries and your locations"""
    
    # Your coordinates in decimal degrees
    coordinates = [
        (50.798306, 6.024389),   # Point 1: Aachen area
        (50.147389, 8.674611),   # Point 2: Frankfurt area  
        (49.212806, 7.107694),   # Point 3: Saarbrücken area
        (51.838000, 6.610694),   # Point 4: Münster area
        (51.254000, 8.156500),   # Point 5: Paderborn area
        (50.864500, 7.157500)    # Point 6: Cologne area
    ]
    
    # Create map centered on Germany
    germany_center = [51.1657, 10.4515]
    m = folium.Map(location=germany_center, zoom_start=6)
    
    # Add Germany country boundaries using OpenStreetMap data
    try:
        # Get Germany GeoJSON from a public API
        germany_geojson_url = "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"
        
        # Alternative: Use a simpler approach with folium's built-in features
        # Add a rectangle representing Germany's approximate boundaries
        germany_bounds = [
            [47.270, 5.866],   # Southwest corner
            [55.058, 15.042]   # Northeast corner
        ]
        
        # Add your location markers
        colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred']
        for i, (lat, lon) in enumerate(coordinates, 1):
            folium.Marker(
                [lat, lon],
                popup=f'<b>Location {i}</b><br>Lat: {lat:.4f}<br>Lon: {lon:.4f}',
                tooltip=f'Point {i}',
                icon=folium.Icon(color=colors[i-1] if i-1 < len(colors) else 'red', 
                               icon='info-sign')
            ).add_to(m)
            
            # Add circle markers for better visibility
            folium.CircleMarker(
                [lat, lon],
                radius=8,
                popup=f'Location {i}',
                color=colors[i-1] if i-1 < len(colors) else 'red',
                fill=True,
                fillColor=colors[i-1] if i-1 < len(colors) else 'red'
            ).add_to(m)
    
    except Exception as e:
        print(f"Note: Could not load Germany boundaries: {e}")
    
    # Save the map
    m.save('germany_locations_map.html')
    print("Interactive map with Germany context saved as 'germany_locations_map.html'")
    print("Open this file in your web browser to see the interactive map!")
    return m

# Method 2: Using Matplotlib with Cartopy (Proper Map Projection)
def create_cartopy_map():
    """Create a static map using Cartopy for proper geographical projection"""
    try:
        import cartopy.crs as ccrs
        import cartopy.feature as cfeature
        
        coordinates = [
            (50.798306, 6.024389),   # Point 1: Aachen area
            (50.147389, 8.674611),   # Point 2: Frankfurt area  
            (49.212806, 7.107694),   # Point 3: Saarbrücken area
            (51.838000, 6.610694),   # Point 4: Münster area
            (51.254000, 8.156500),   # Point 5: Paderborn area
            (50.864500, 7.157500)    # Point 6: Cologne area
        ]
        
        # Create figure with map projection
        fig, ax = plt.subplots(1, 1, figsize=(12, 10), 
                              subplot_kw={'projection': ccrs.PlateCarree()})
        
        # Set extent to focus on Germany
        ax.set_extent([5.5, 15.5, 47, 55], crs=ccrs.PlateCarree())
        
        # Add map features
        ax.add_feature(cfeature.COASTLINE, linewidth=0.5)
        ax.add_feature(cfeature.BORDERS, linewidth=0.5)
        ax.add_feature(cfeature.LAND, alpha=0.3, color='lightgray')
        ax.add_feature(cfeature.OCEAN, alpha=0.3, color='lightblue')
        ax.add_feature(cfeature.LAKES, alpha=0.3, color='lightblue')
        ax.add_feature(cfeature.RIVERS, alpha=0.3)
        
        # Add gridlines
        gl = ax.gridlines(draw_labels=True, alpha=0.3)
        gl.top_labels = False
        gl.right_labels = False
        
        # Plot your locations
        lons = [coord[1] for coord in coordinates]
        lats = [coord[0] for coord in coordinates]
        
        scatter = ax.scatter(lons, lats, c='red', s=200, alpha=0.8, 
                           edgecolors='black', linewidth=2, 
                           transform=ccrs.PlateCarree(), zorder=5)
        
        # Add labels for each point
        for i, (lat, lon) in enumerate(coordinates, 1):
            ax.text(lon + 0.1, lat + 0.1, f'Point {i}', 
                   transform=ccrs.PlateCarree(), fontsize=10, 
                   bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
        
        plt.title('Your Locations in Germany', fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig('germany_map_cartopy.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        print("Static map with proper projection saved as 'germany_map_cartopy.png'")
        
    except ImportError:
        print("Cartopy not installed. Install with: pip install cartopy")
        print("Using alternative matplotlib method...")
        create_simple_map_with_context()

# Method 3: Simple Matplotlib with better context
def create_simple_map_with_context():
    """Create a simple map with better visual context"""
    
    coordinates = [
        (50.798306, 6.024389),   # Point 1: Aachen
        (50.147389, 8.674611),   # Point 2: Frankfurt  
        (49.212806, 7.107694),   # Point 3: Saarbrücken
        (51.838000, 6.610694),   # Point 4: Münster
        (51.254000, 8.156500),   # Point 5: Paderborn
        (50.864500, 7.157500)    # Point 6: Cologne
    ]
    
    # City names for reference
    city_names = ['Aachen', 'Frankfurt', 'Saarbrücken', 'Münster', 'Paderborn', 'Cologne']
    
    plt.figure(figsize=(14, 10))
    
    # Germany approximate boundary (simplified polygon)
    germany_boundary_lon = [5.9, 6.2, 7.1, 8.2, 9.9, 12.2, 14.8, 15.0, 14.2, 12.8, 10.9, 9.6, 8.5, 7.5, 6.2, 5.9]
    germany_boundary_lat = [47.3, 49.0, 49.8, 50.1, 50.9, 51.8, 51.0, 50.9, 48.4, 47.7, 47.3, 47.5, 47.7, 48.5, 49.5, 47.3]
    
    # Plot Germany boundary
    plt.fill(germany_boundary_lon, germany_boundary_lat, alpha=0.2, color='lightblue', 
             edgecolor='black', linewidth=2, label='Germany (approximate)')
    
    # Extract coordinates
    lats = [coord[0] for coord in coordinates]
    lons = [coord[1] for coord in coordinates]
    
    # Plot your locations
    colors = ['red', 'blue', 'green', 'purple', 'orange', 'brown']
    for i, (lat, lon, city, color) in enumerate(zip(lats, lons, city_names, colors)):
        plt.scatter(lon, lat, c=color, s=200, alpha=0.8, edgecolors='black', 
                   linewidth=2, label=f'Point {i+1}: {city}')
        
        # Add city labels
        plt.annotate(f'{i+1}. {city}', (lon, lat), xytext=(8, 8), 
                    textcoords='offset points', fontsize=10, fontweight='bold',
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
    
    # Styling
    plt.xlim(5.5, 15.5)
    plt.ylim(47, 55)
    plt.xlabel('Longitude (°E)', fontsize=12)
    plt.ylabel('Latitude (°N)', fontsize=12)
    plt.title('Your Locations on Germany Map', fontsize=16, fontweight='bold')
    plt.grid(True, alpha=0.3)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    
    plt.tight_layout()
    plt.savefig('germany_locations_simple.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print("Map saved as 'germany_locations_simple.png'")

if __name__ == "__main__":
    print("Creating Germany map with your locations...\n")
    
    print("=== METHOD 1: Interactive Map (RECOMMENDED) ===")
    create_folium_map()
    print()
    
    print("=== METHOD 2: Static Map with Cartopy ===")
    create_cartopy_map()
    print()
    
    print("=== METHOD 3: Simple Map with Context ===")
    create_simple_map_with_context()
    print()
    
    print("RECOMMENDED: Open 'germany_locations_map.html' in your web browser")
    print("for the best interactive map experience!")
